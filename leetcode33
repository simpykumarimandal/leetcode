import java.util.HashMap;


class Solution {
     public String minWindow(String s, String t) {
        if (s == null || t == null || s.length() == 0 || t.length() == 0) {
            return "";
        }

        HashMap<Character, Integer> targetMap = new HashMap<>();
        for (char c : t.toCharArray()) {
            targetMap.put(c, targetMap.getOrDefault(c, 0) + 1);
        }

        int windowStart = 0;
        int minLength = Integer.MAX_VALUE;
        int minWindowStart = 0;
        int count = 0; 

        for (int windowEnd = 0; windowEnd < s.length(); windowEnd++) {
            char charEnd = s.charAt(windowEnd);

            if (targetMap.containsKey(charEnd)) {
                targetMap.put(charEnd, targetMap.get(charEnd) - 1);
                if (targetMap.get(charEnd) >= 0) {
                    count++;
                }
            }

            while (count == t.length()) {
                int currentWindowLength = windowEnd - windowStart + 1;
                if (currentWindowLength < minLength) {
                    minLength = currentWindowLength;
                    minWindowStart = windowStart;
                }

                char charStart = s.charAt(windowStart);
                if (targetMap.containsKey(charStart)) {
                    targetMap.put(charStart, targetMap.get(charStart) + 1);
                    if (targetMap.get(charStart) > 0) {
                        count--;
                    }
                }
                windowStart++;
            }
        }

        if (minLength == Integer.MAX_VALUE) {
            return "";
        }

        return s.substring(minWindowStart, minWindowStart + minLength);
    }
}
